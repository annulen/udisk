#!/usr/bin/env perl

use strict;
use warnings;

my @commands_ordered = (
    status => "Shows high-level status",
    mount => "Mount a filesystem",
    umount => "Unmount a filesystem",
    help => "Shows this information"
);
my %commands = @commands_ordered;

sub help {
    print "Usage: $0 COMMAND\n\n";
    print "Commands:\n";
    for(my $i = 0; $i < @commands_ordered; $i += 2) {
        my ($c, $h) = @commands_ordered[$i, $i + 1];
        printf "  %-15s  %s\n", $c, $h;
    }
}

sub usage {
    print "@_\n";
    help();
    exit(1);
}

sub status_processHeader {
    my $pipe = shift;

    # MODEL REVISION SERIAL DEVICE
    # ----------------------------
    $_ = <$pipe>;
    join(' ', split) eq "MODEL REVISION SERIAL DEVICE" or return "";
    $_ = <$pipe>;
    /^-*$/ or return "";
    return 1;
}

sub status {
    my $cmd = "udisksctl status";
    open my $pipe, "-|", $cmd;
    status_processHeader($pipe, $cmd) or usage "Unrecognized output format for `$cmd'";;

    my $fmt = "%15s    %s\n";

    printf $fmt, "Model", "Device";
    print "-" x 75, "\n";

    while (<$pipe>) {
        my @fields = split /\s+/;
        my $dev = "/dev/$fields[-1]";
        my @devs = glob("$dev*");
        printf $fmt, $fields[0], $dev;
        printf $fmt, $fields[1], "(@devs)";
        print "\n";
    }
}

sub mount {
    my $cmd = "udisksctl mount -b";
    for my $dev (@_) {
        print "$cmd $dev\n";
        system("$cmd $dev");
        print "\n";
    }
}

sub umount {
    my $cmd = "udisksctl unmount -b";
    for my $dev (@_) {
        print "$cmd $dev\n";
        system("$cmd $dev");
        print "\n";
    }
}

my $cmd = shift @ARGV;
exists $commands{$cmd} or usage "Unknown command `$cmd'";
{
    no strict 'refs';
    &$cmd(@ARGV);
}
