#!/usr/bin/env perl

use List::Util qw/max/;

use strict;
use warnings;

my @commands_ordered = (
    status => "Prints high-level status (default command)",
    mount => "Mounts a filesystem",
    umount => "Unmounts a filesystem",
    wait => "Waits for new device to appear then prints status",
    help => "Shows this information"
);
my %commands = @commands_ordered;

sub help {
    print "Usage: $0 [COMMAND]\n\n";
    print "Commands:\n";
    for(my $i = 0; $i < @commands_ordered; $i += 2) {
        my ($c, $h) = @commands_ordered[$i, $i + 1];
        printf "  %-15s  %s\n", $c, $h;
    }
}

sub usage {
    print "@_\n";
    help();
    exit(1);
}

sub status_processHeader {
    my $pipe = shift;

    # MODEL REVISION SERIAL DEVICE
    # ----------------------------
    my $hdr = <$pipe>;
    $hdr =~ /^MODEL\s+(REVISION)\s+(SERIAL)\s+(DEVICE)/ or return "";

    # Get widths of first three columns in header line, leaving one character
    # for spacing
    my ($i, $j, $k) = map { $-[$_] - $-[$_-1] - 1 } 1..3;

    # 1. Fields have minimum width of at least $i, $j, $k, but maximum width
    #    is not limited
    # 2. Fields are always separated by at least one space
    my $in_fmt = qr/^(.{$i,}?)\s+(.{$j,}?)\s+(.{$k,}?)\s+(\S+)/;

    my $model_width = max(32, $i);
    my $out_fmt = "%-${model_width}s %s";

    $_ = <$pipe>;
    /^-*$/ or return "";
    return $in_fmt, $out_fmt;
}

sub status {
    my $cmd = "udisksctl status";
    open my $pipe, "-|", $cmd or die "$cmd failed: $!";

    my ($in_fmt, $out_fmt) = status_processHeader($pipe, $cmd)
        or usage "Unrecognized output format for `$cmd'";

    while (<$pipe>) {
        my @fields = m/$in_fmt/;
        @fields == 4 or die "Failed to parse line: $_";
        my $dev = pop @fields;
        $dev = "/dev/$dev";
        -e "$dev" or die "Device file does not exist: $dev";
        my @devs = glob("$dev*");
        printf $out_fmt, $fields[0], "$devs[0]\n";
        for my $i (1..$#devs) {
            printf $out_fmt, "", "$devs[$i]\n";
        }
    }
}

sub mount {
    my $cmd = "udisksctl mount -b";
    for my $dev (@_) {
        print "$cmd $dev\n";
        system("$cmd $dev");
        print "Exit code: $?\n";
        print "\n";
    }
}

sub umount {
    my $cmd = "udisksctl unmount -b";
    for my $dev (@_) {
        print "$cmd $dev\n";
        system("$cmd $dev");
        print "Exit code: $?\n";
        print "\n";
    }
}

sub wait {
    my $cmd = "udisksctl monitor";
    my $pid = open my $pipe, "-|", $cmd or die "$cmd failed: $!";
    while (<$pipe>) {
        print;
        last if (/^[0-9.:]+: Added /);
    }
    print "Stopping monitor...\n";
    kill 9, $pid;
    print "\n";
    status();
}

my $cmd = shift @ARGV // "status";
exists $commands{$cmd} or usage "Unknown command `$cmd'";
{
    no strict 'refs';
    &$cmd(@ARGV);
}
